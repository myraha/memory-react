{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/promise\"));\n\nvar _assign = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/assign\"));\n\nvar _set = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/set\"));\n\nvar __importDefault = void 0 && (void 0).__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst url_1 = require(\"url\");\n\nconst mitt_1 = __importDefault(require(\"../mitt\"));\n\nconst utils_1 = require(\"../utils\");\n\nfunction toRoute(path) {\n  return path.replace(/\\/$/, '') || '/';\n}\n\nclass Router {\n  constructor(pathname, query, as, {\n    initialProps,\n    pageLoader,\n    App,\n    Component,\n    err\n  }) {\n    this.onPopState = e => {\n      if (!e.state) {\n        // We get state as undefined for two reasons.\n        //  1. With older safari (< 8) and older chrome (< 34)\n        //  2. When the URL changed with #\n        //\n        // In the both cases, we don't need to proceed and change the route.\n        // (as it's already changed)\n        // But we can simply replace the state with the new changes.\n        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n        // So, doing the following for (1) does no harm.\n        const {\n          pathname,\n          query\n        } = this;\n        this.changeState('replaceState', utils_1.formatWithValidation({\n          pathname,\n          query\n        }), utils_1.getURL());\n        return;\n      } // Make sure we don't re-render on initial load,\n      // can be caused by navigating back from an external site\n\n\n      if (e.state.options && e.state.options.fromExternal) {\n        return;\n      } // If the downstream application returns falsy, return.\n      // They will then be responsible for handling the event.\n\n\n      if (this._bps && !this._bps(e.state)) {\n        return;\n      }\n\n      const {\n        url,\n        as,\n        options\n      } = e.state;\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (typeof url === 'undefined' || typeof as === 'undefined') {\n          console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n        }\n      }\n\n      this.replace(url, as, options);\n    }; // represents the current component key\n\n\n    this.route = toRoute(pathname); // set up the component cache (by route keys)\n\n    this.components = {}; // We should not keep the cache, if there's an error\n    // Otherwise, this cause issues when when going back and\n    // come again to the errored page.\n\n    if (pathname !== '/_error') {\n      this.components[this.route] = {\n        Component,\n        props: initialProps,\n        err\n      };\n    }\n\n    this.components['/_app'] = {\n      Component: App\n    }; // Backwards compat for Router.router.events\n    // TODO: Should be remove the following major version as it was never documented\n    // @ts-ignore backwards compatibility\n\n    this.events = Router.events;\n    this.pageLoader = pageLoader;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.subscriptions = new _set.default();\n    this.componentLoadCancel = null;\n\n    if (typeof window !== 'undefined') {\n      // in order for `e.state` to work on the `onpopstate` event\n      // we have to register the initial route upon initialization\n      this.changeState('replaceState', utils_1.formatWithValidation({\n        pathname,\n        query\n      }), as);\n      window.addEventListener('popstate', this.onPopState);\n      window.addEventListener('unload', () => {\n        // Workaround for popstate firing on initial page load when\n        // navigating back from an external site\n        if (history.state) {\n          const {\n            url,\n            as,\n            options\n          } = history.state;\n          this.changeState('replaceState', url, as, (0, _assign.default)({}, options, {\n            fromExternal: true\n          }));\n        }\n      });\n    }\n  }\n\n  static _rewriteUrlForNextExport(url) {\n    const [pathname, hash] = url.split('#'); // tslint:disable-next-line\n\n    let [path, qs] = pathname.split('?');\n    path = path.replace(/\\/$/, ''); // Append a trailing slash if this path does not have an extension\n\n    if (!/\\.[^/]+\\/?$/.test(path)) path += `/`;\n    if (qs) path += '?' + qs;\n    if (hash) path += '#' + hash;\n    return path;\n  }\n\n  update(route, Component) {\n    const data = this.components[route];\n\n    if (!data) {\n      throw new Error(`Cannot update unavailable route: ${route}`);\n    }\n\n    const newData = (0, _assign.default)({}, data, {\n      Component\n    });\n    this.components[route] = newData; // pages/_app.js updated\n\n    if (route === '/_app') {\n      this.notify(this.components[this.route]);\n      return;\n    }\n\n    if (route === this.route) {\n      this.notify(newData);\n    }\n  }\n\n  reload(route) {\n    return new _promise.default((resolve, reject) => {\n      delete this.components[route];\n      this.pageLoader.clearCache(route);\n\n      if (route !== this.route) {\n        return resolve();\n      }\n\n      const {\n        pathname,\n        query\n      } = this;\n      const url = window.location.href; // This makes sure we only use pathname + query + hash, to mirror `asPath` coming from the server.\n\n      const as = window.location.pathname + window.location.search + window.location.hash;\n      Router.events.emit('routeChangeStart', url);\n      this.getRouteInfo(route, pathname, query, as).then(routeInfo => {\n        const {\n          error\n        } = routeInfo;\n\n        if (error && error.cancelled) {\n          return resolve();\n        }\n\n        this.notify(routeInfo);\n\n        if (error) {\n          Router.events.emit('routeChangeError', error, url);\n          return reject(error);\n        }\n\n        Router.events.emit('routeChangeComplete', url);\n      });\n    });\n  }\n\n  back() {\n    window.history.back();\n  }\n\n  push(url, as = url, options = {}) {\n    return this.change('pushState', url, as, options);\n  }\n\n  replace(url, as = url, options = {}) {\n    return this.change('replaceState', url, as, options);\n  }\n\n  change(method, _url, _as, options) {\n    return new _promise.default((resolve, reject) => {\n      // If url and as provided as an object representation,\n      // we'll format them into the string version here.\n      const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n      let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as; // Add the ending slash to the paths. So, we can serve the\n      // \"<page>/index.html\" directly for the SSR page.\n\n      if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n        // @ts-ignore this is temporarily global (attached to window)\n        if (__NEXT_DATA__.nextExport) {\n          as = Router._rewriteUrlForNextExport(as);\n        }\n      }\n\n      this.abortComponentLoad(as); // If the url change is only related to a hash change\n      // We should not proceed. We should only change the state.\n\n      if (this.onlyAHashChange(as)) {\n        Router.events.emit('hashChangeStart', as);\n        this.changeState(method, url, as);\n        this.scrollToHash(as);\n        Router.events.emit('hashChangeComplete', as);\n        return true;\n      }\n\n      const {\n        pathname,\n        query\n      } = url_1.parse(url, true); // If asked to change the current URL we should reload the current page\n      // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n      // We also need to set the method = replaceState always\n      // as this should not go into the history (That's how browsers work)\n      // We should compare the new asPath to the current asPath, not the url\n\n      if (!this.urlIsNew(as)) {\n        method = 'replaceState';\n      } // @ts-ignore pathname is always a string\n\n\n      const route = toRoute(pathname);\n      const {\n        shallow = false\n      } = options;\n      Router.events.emit('routeChangeStart', as); // If shallow is true and the route exists in the router cache we reuse the previous result\n      // @ts-ignore pathname is always a string\n\n      this.getRouteInfo(route, pathname, query, as, shallow).then(routeInfo => {\n        const {\n          error\n        } = routeInfo;\n\n        if (error && error.cancelled) {\n          return resolve(false);\n        }\n\n        Router.events.emit('beforeHistoryChange', as);\n        this.changeState(method, url, as, options);\n        const hash = window.location.hash.substring(1); // @ts-ignore pathname is always defined\n\n        this.set(route, pathname, query, as, (0, _assign.default)({}, routeInfo, {\n          hash\n        }));\n\n        if (error) {\n          Router.events.emit('routeChangeError', error, as);\n          throw error;\n        }\n\n        Router.events.emit('routeChangeComplete', as);\n        return resolve(true);\n      }, reject);\n    });\n  }\n\n  changeState(method, url, as, options = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof window.history === 'undefined') {\n        console.error(`Warning: window.history is not available.`);\n        return;\n      } // @ts-ignore method should always exist on history\n\n\n      if (typeof window.history[method] === 'undefined') {\n        console.error(`Warning: window.history.${method} is not available`);\n        return;\n      }\n    }\n\n    if (method !== 'pushState' || utils_1.getURL() !== as) {\n      // @ts-ignore method should always exist on history\n      window.history[method]({\n        url,\n        as,\n        options\n      }, null, as);\n    }\n  }\n\n  getRouteInfo(route, pathname, query, as, shallow = false) {\n    const cachedRouteInfo = this.components[route]; // If there is a shallow route transition possible\n    // If the route is already rendered on the screen.\n\n    if (shallow && cachedRouteInfo && this.route === route) {\n      return _promise.default.resolve(cachedRouteInfo);\n    }\n\n    return new _promise.default((resolve, reject) => {\n      if (cachedRouteInfo) {\n        return resolve(cachedRouteInfo);\n      }\n\n      this.fetchComponent(route).then(Component => resolve({\n        Component\n      }), reject);\n    }).then(routeInfo => {\n      const {\n        Component\n      } = routeInfo;\n\n      if (process.env.NODE_ENV !== 'production') {\n        const {\n          isValidElementType\n        } = require('react-is');\n\n        if (!isValidElementType(Component)) {\n          throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n        }\n      }\n\n      return new _promise.default((resolve, reject) => {\n        const ctx = {\n          pathname,\n          query,\n          asPath: as\n        };\n        this.getInitialProps(Component, ctx).then(props => {\n          routeInfo.props = props;\n          this.components[route] = routeInfo;\n          resolve(routeInfo);\n        }, reject);\n      });\n    }).catch(err => {\n      return new _promise.default(resolve => {\n        if (err.code === 'PAGE_LOAD_ERROR') {\n          // If we can't load the page it could be one of following reasons\n          //  1. Page doesn't exists\n          //  2. Page does exist in a different zone\n          //  3. Internal error while loading the page\n          // So, doing a hard reload is the proper way to deal with this.\n          window.location.href = as; // Changing the URL doesn't block executing the current code path.\n          // So, we need to mark it as a cancelled error and stop the routing logic.\n\n          err.cancelled = true; // @ts-ignore TODO: fix the control flow here\n\n          return resolve({\n            error: err\n          });\n        }\n\n        if (err.cancelled) {\n          // @ts-ignore TODO: fix the control flow here\n          return resolve({\n            error: err\n          });\n        }\n\n        resolve(this.fetchComponent('/_error').then(Component => {\n          const routeInfo = {\n            Component,\n            err\n          };\n          const ctx = {\n            err,\n            pathname,\n            query\n          };\n          return new _promise.default(resolve => {\n            this.getInitialProps(Component, ctx).then(props => {\n              routeInfo.props = props;\n              routeInfo.error = err;\n              resolve(routeInfo);\n            }, gipErr => {\n              console.error('Error in error page `getInitialProps`: ', gipErr);\n              routeInfo.error = err;\n              routeInfo.props = {};\n              resolve(routeInfo);\n            });\n          });\n        }));\n      });\n    });\n  }\n\n  set(route, pathname, query, as, data) {\n    this.route = route;\n    this.pathname = pathname;\n    this.query = query;\n    this.asPath = as;\n    this.notify(data);\n  }\n\n  beforePopState(cb) {\n    this._bps = cb;\n  }\n\n  onlyAHashChange(as) {\n    if (!this.asPath) return false;\n    const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n    const [newUrlNoHash, newHash] = as.split('#'); // Makes sure we scroll to the provided hash if the url/hash are the same\n\n    if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {\n      return true;\n    } // If the urls are change, there's more than a hash change\n\n\n    if (oldUrlNoHash !== newUrlNoHash) {\n      return false;\n    } // If the hash has changed, then it's a hash only change.\n    // This check is necessary to handle both the enter and\n    // leave hash === '' cases. The identity case falls through\n    // and is treated as a next reload.\n\n\n    return oldHash !== newHash;\n  }\n\n  scrollToHash(as) {\n    const [, hash] = as.split('#'); // Scroll to top if the hash is just `#` with no value\n\n    if (hash === '') {\n      window.scrollTo(0, 0);\n      return;\n    } // First we check if the element by id is found\n\n\n    const idEl = document.getElementById(hash);\n\n    if (idEl) {\n      idEl.scrollIntoView();\n      return;\n    } // If there's no element with the id, we check the `name` property\n    // To mirror browsers\n\n\n    const nameEl = document.getElementsByName(hash)[0];\n\n    if (nameEl) {\n      nameEl.scrollIntoView();\n    }\n  }\n\n  urlIsNew(asPath) {\n    return this.asPath !== asPath;\n  }\n\n  prefetch(url) {\n    return new _promise.default((resolve, reject) => {\n      // Prefetch is not supported in development mode because it would trigger on-demand-entries\n      if (process.env.NODE_ENV !== 'production' || process.env.__NEXT_EXPERIMENTAL_DEBUG) return;\n      const {\n        pathname\n      } = url_1.parse(url); // @ts-ignore pathname is always defined\n\n      const route = toRoute(pathname);\n      this.pageLoader.prefetch(route).then(resolve, reject);\n    });\n  }\n\n  async fetchComponent(route) {\n    let cancelled = false;\n\n    const cancel = this.componentLoadCancel = () => {\n      cancelled = true;\n    };\n\n    const Component = await this.pageLoader.loadPage(route);\n\n    if (cancelled) {\n      const error = new Error(`Abort fetching component for route: \"${route}\"`);\n      error.cancelled = true;\n      throw error;\n    }\n\n    if (cancel === this.componentLoadCancel) {\n      this.componentLoadCancel = null;\n    }\n\n    return Component;\n  }\n\n  async getInitialProps(Component, ctx) {\n    let cancelled = false;\n\n    const cancel = () => {\n      cancelled = true;\n    };\n\n    this.componentLoadCancel = cancel;\n    const {\n      Component: App\n    } = this.components['/_app'];\n    const props = await utils_1.loadGetInitialProps(App, {\n      Component,\n      router: this,\n      ctx\n    });\n\n    if (cancel === this.componentLoadCancel) {\n      this.componentLoadCancel = null;\n    }\n\n    if (cancelled) {\n      const err = new Error('Loading initial props cancelled');\n      err.cancelled = true;\n      throw err;\n    }\n\n    return props;\n  }\n\n  abortComponentLoad(as) {\n    if (this.componentLoadCancel) {\n      Router.events.emit('routeChangeError', new Error('Route Cancelled'), as);\n      this.componentLoadCancel();\n      this.componentLoadCancel = null;\n    }\n  }\n\n  notify(data) {\n    const {\n      Component: App\n    } = this.components['/_app'];\n    this.subscriptions.forEach(fn => fn((0, _assign.default)({}, data, {\n      App\n    })));\n  }\n\n  subscribe(fn) {\n    this.subscriptions.add(fn);\n    return () => this.subscriptions.delete(fn);\n  }\n\n}\n\nRouter.events = mitt_1.default();\nexports.default = Router;","map":{"version":3,"sources":["/Users/myraha/Desktop/Projects/memory-app/hello-next/node_modules/next-server/dist/lib/router/router.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","url_1","require","mitt_1","utils_1","toRoute","path","replace","Router","constructor","pathname","query","as","initialProps","pageLoader","App","Component","err","onPopState","e","state","changeState","formatWithValidation","getURL","options","fromExternal","_bps","url","process","env","NODE_ENV","console","warn","route","components","props","events","asPath","subscriptions","componentLoadCancel","window","addEventListener","history","_rewriteUrlForNextExport","hash","split","qs","test","update","data","Error","newData","notify","reload","resolve","reject","clearCache","location","href","search","emit","getRouteInfo","then","routeInfo","error","cancelled","back","push","change","method","_url","_as","__NEXT_EXPORT_TRAILING_SLASH","__NEXT_DATA__","nextExport","abortComponentLoad","onlyAHashChange","scrollToHash","parse","urlIsNew","shallow","substring","set","cachedRouteInfo","fetchComponent","isValidElementType","ctx","getInitialProps","catch","code","gipErr","beforePopState","cb","oldUrlNoHash","oldHash","newUrlNoHash","newHash","scrollTo","idEl","document","getElementById","scrollIntoView","nameEl","getElementsByName","prefetch","__NEXT_EXPERIMENTAL_DEBUG","cancel","loadPage","loadGetInitialProps","router","forEach","fn","subscribe","add","delete","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst url_1 = require(\"url\");\nconst mitt_1 = __importDefault(require(\"../mitt\"));\nconst utils_1 = require(\"../utils\");\nfunction toRoute(path) {\n    return path.replace(/\\/$/, '') || '/';\n}\nclass Router {\n    constructor(pathname, query, as, { initialProps, pageLoader, App, Component, err }) {\n        this.onPopState = (e) => {\n            if (!e.state) {\n                // We get state as undefined for two reasons.\n                //  1. With older safari (< 8) and older chrome (< 34)\n                //  2. When the URL changed with #\n                //\n                // In the both cases, we don't need to proceed and change the route.\n                // (as it's already changed)\n                // But we can simply replace the state with the new changes.\n                // Actually, for (1) we don't need to nothing. But it's hard to detect that event.\n                // So, doing the following for (1) does no harm.\n                const { pathname, query } = this;\n                this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), utils_1.getURL());\n                return;\n            }\n            // Make sure we don't re-render on initial load,\n            // can be caused by navigating back from an external site\n            if (e.state.options && e.state.options.fromExternal) {\n                return;\n            }\n            // If the downstream application returns falsy, return.\n            // They will then be responsible for handling the event.\n            if (this._bps && !this._bps(e.state)) {\n                return;\n            }\n            const { url, as, options } = e.state;\n            if (process.env.NODE_ENV !== 'production') {\n                if (typeof url === 'undefined' || typeof as === 'undefined') {\n                    console.warn('`popstate` event triggered but `event.state` did not have `url` or `as` https://err.sh/zeit/next.js/popstate-state-empty');\n                }\n            }\n            this.replace(url, as, options);\n        };\n        // represents the current component key\n        this.route = toRoute(pathname);\n        // set up the component cache (by route keys)\n        this.components = {};\n        // We should not keep the cache, if there's an error\n        // Otherwise, this cause issues when when going back and\n        // come again to the errored page.\n        if (pathname !== '/_error') {\n            this.components[this.route] = { Component, props: initialProps, err };\n        }\n        this.components['/_app'] = { Component: App };\n        // Backwards compat for Router.router.events\n        // TODO: Should be remove the following major version as it was never documented\n        // @ts-ignore backwards compatibility\n        this.events = Router.events;\n        this.pageLoader = pageLoader;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.subscriptions = new Set();\n        this.componentLoadCancel = null;\n        if (typeof window !== 'undefined') {\n            // in order for `e.state` to work on the `onpopstate` event\n            // we have to register the initial route upon initialization\n            this.changeState('replaceState', utils_1.formatWithValidation({ pathname, query }), as);\n            window.addEventListener('popstate', this.onPopState);\n            window.addEventListener('unload', () => {\n                // Workaround for popstate firing on initial page load when\n                // navigating back from an external site\n                if (history.state) {\n                    const { url, as, options } = history.state;\n                    this.changeState('replaceState', url, as, Object.assign({}, options, { fromExternal: true }));\n                }\n            });\n        }\n    }\n    static _rewriteUrlForNextExport(url) {\n        const [pathname, hash] = url.split('#');\n        // tslint:disable-next-line\n        let [path, qs] = pathname.split('?');\n        path = path.replace(/\\/$/, '');\n        // Append a trailing slash if this path does not have an extension\n        if (!/\\.[^/]+\\/?$/.test(path))\n            path += `/`;\n        if (qs)\n            path += '?' + qs;\n        if (hash)\n            path += '#' + hash;\n        return path;\n    }\n    update(route, Component) {\n        const data = this.components[route];\n        if (!data) {\n            throw new Error(`Cannot update unavailable route: ${route}`);\n        }\n        const newData = Object.assign({}, data, { Component });\n        this.components[route] = newData;\n        // pages/_app.js updated\n        if (route === '/_app') {\n            this.notify(this.components[this.route]);\n            return;\n        }\n        if (route === this.route) {\n            this.notify(newData);\n        }\n    }\n    reload(route) {\n        return new Promise((resolve, reject) => {\n            delete this.components[route];\n            this.pageLoader.clearCache(route);\n            if (route !== this.route) {\n                return resolve();\n            }\n            const { pathname, query } = this;\n            const url = window.location.href;\n            // This makes sure we only use pathname + query + hash, to mirror `asPath` coming from the server.\n            const as = window.location.pathname + window.location.search + window.location.hash;\n            Router.events.emit('routeChangeStart', url);\n            this.getRouteInfo(route, pathname, query, as).then((routeInfo) => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve();\n                }\n                this.notify(routeInfo);\n                if (error) {\n                    Router.events.emit('routeChangeError', error, url);\n                    return reject(error);\n                }\n                Router.events.emit('routeChangeComplete', url);\n            });\n        });\n    }\n    back() {\n        window.history.back();\n    }\n    push(url, as = url, options = {}) {\n        return this.change('pushState', url, as, options);\n    }\n    replace(url, as = url, options = {}) {\n        return this.change('replaceState', url, as, options);\n    }\n    change(method, _url, _as, options) {\n        return new Promise((resolve, reject) => {\n            // If url and as provided as an object representation,\n            // we'll format them into the string version here.\n            const url = typeof _url === 'object' ? utils_1.formatWithValidation(_url) : _url;\n            let as = typeof _as === 'object' ? utils_1.formatWithValidation(_as) : _as;\n            // Add the ending slash to the paths. So, we can serve the\n            // \"<page>/index.html\" directly for the SSR page.\n            if (process.env.__NEXT_EXPORT_TRAILING_SLASH) {\n                // @ts-ignore this is temporarily global (attached to window)\n                if (__NEXT_DATA__.nextExport) {\n                    as = Router._rewriteUrlForNextExport(as);\n                }\n            }\n            this.abortComponentLoad(as);\n            // If the url change is only related to a hash change\n            // We should not proceed. We should only change the state.\n            if (this.onlyAHashChange(as)) {\n                Router.events.emit('hashChangeStart', as);\n                this.changeState(method, url, as);\n                this.scrollToHash(as);\n                Router.events.emit('hashChangeComplete', as);\n                return true;\n            }\n            const { pathname, query } = url_1.parse(url, true);\n            // If asked to change the current URL we should reload the current page\n            // (not location.reload() but reload getInitialProps and other Next.js stuffs)\n            // We also need to set the method = replaceState always\n            // as this should not go into the history (That's how browsers work)\n            // We should compare the new asPath to the current asPath, not the url\n            if (!this.urlIsNew(as)) {\n                method = 'replaceState';\n            }\n            // @ts-ignore pathname is always a string\n            const route = toRoute(pathname);\n            const { shallow = false } = options;\n            Router.events.emit('routeChangeStart', as);\n            // If shallow is true and the route exists in the router cache we reuse the previous result\n            // @ts-ignore pathname is always a string\n            this.getRouteInfo(route, pathname, query, as, shallow).then((routeInfo) => {\n                const { error } = routeInfo;\n                if (error && error.cancelled) {\n                    return resolve(false);\n                }\n                Router.events.emit('beforeHistoryChange', as);\n                this.changeState(method, url, as, options);\n                const hash = window.location.hash.substring(1);\n                // @ts-ignore pathname is always defined\n                this.set(route, pathname, query, as, Object.assign({}, routeInfo, { hash }));\n                if (error) {\n                    Router.events.emit('routeChangeError', error, as);\n                    throw error;\n                }\n                Router.events.emit('routeChangeComplete', as);\n                return resolve(true);\n            }, reject);\n        });\n    }\n    changeState(method, url, as, options = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (typeof window.history === 'undefined') {\n                console.error(`Warning: window.history is not available.`);\n                return;\n            }\n            // @ts-ignore method should always exist on history\n            if (typeof window.history[method] === 'undefined') {\n                console.error(`Warning: window.history.${method} is not available`);\n                return;\n            }\n        }\n        if (method !== 'pushState' || utils_1.getURL() !== as) {\n            // @ts-ignore method should always exist on history\n            window.history[method]({ url, as, options }, null, as);\n        }\n    }\n    getRouteInfo(route, pathname, query, as, shallow = false) {\n        const cachedRouteInfo = this.components[route];\n        // If there is a shallow route transition possible\n        // If the route is already rendered on the screen.\n        if (shallow && cachedRouteInfo && this.route === route) {\n            return Promise.resolve(cachedRouteInfo);\n        }\n        return new Promise((resolve, reject) => {\n            if (cachedRouteInfo) {\n                return resolve(cachedRouteInfo);\n            }\n            this.fetchComponent(route).then((Component) => resolve({ Component }), reject);\n        }).then((routeInfo) => {\n            const { Component } = routeInfo;\n            if (process.env.NODE_ENV !== 'production') {\n                const { isValidElementType } = require('react-is');\n                if (!isValidElementType(Component)) {\n                    throw new Error(`The default export is not a React Component in page: \"${pathname}\"`);\n                }\n            }\n            return new Promise((resolve, reject) => {\n                const ctx = { pathname, query, asPath: as };\n                this.getInitialProps(Component, ctx).then((props) => {\n                    routeInfo.props = props;\n                    this.components[route] = routeInfo;\n                    resolve(routeInfo);\n                }, reject);\n            });\n        }).catch((err) => {\n            return new Promise((resolve) => {\n                if (err.code === 'PAGE_LOAD_ERROR') {\n                    // If we can't load the page it could be one of following reasons\n                    //  1. Page doesn't exists\n                    //  2. Page does exist in a different zone\n                    //  3. Internal error while loading the page\n                    // So, doing a hard reload is the proper way to deal with this.\n                    window.location.href = as;\n                    // Changing the URL doesn't block executing the current code path.\n                    // So, we need to mark it as a cancelled error and stop the routing logic.\n                    err.cancelled = true;\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                if (err.cancelled) {\n                    // @ts-ignore TODO: fix the control flow here\n                    return resolve({ error: err });\n                }\n                resolve(this.fetchComponent('/_error').then((Component) => {\n                    const routeInfo = { Component, err };\n                    const ctx = { err, pathname, query };\n                    return new Promise((resolve) => {\n                        this.getInitialProps(Component, ctx).then((props) => {\n                            routeInfo.props = props;\n                            routeInfo.error = err;\n                            resolve(routeInfo);\n                        }, (gipErr) => {\n                            console.error('Error in error page `getInitialProps`: ', gipErr);\n                            routeInfo.error = err;\n                            routeInfo.props = {};\n                            resolve(routeInfo);\n                        });\n                    });\n                }));\n            });\n        });\n    }\n    set(route, pathname, query, as, data) {\n        this.route = route;\n        this.pathname = pathname;\n        this.query = query;\n        this.asPath = as;\n        this.notify(data);\n    }\n    beforePopState(cb) {\n        this._bps = cb;\n    }\n    onlyAHashChange(as) {\n        if (!this.asPath)\n            return false;\n        const [oldUrlNoHash, oldHash] = this.asPath.split('#');\n        const [newUrlNoHash, newHash] = as.split('#');\n        // Makes sure we scroll to the provided hash if the url/hash are the same\n        if (newHash && (oldUrlNoHash === newUrlNoHash) && (oldHash === newHash)) {\n            return true;\n        }\n        // If the urls are change, there's more than a hash change\n        if (oldUrlNoHash !== newUrlNoHash) {\n            return false;\n        }\n        // If the hash has changed, then it's a hash only change.\n        // This check is necessary to handle both the enter and\n        // leave hash === '' cases. The identity case falls through\n        // and is treated as a next reload.\n        return oldHash !== newHash;\n    }\n    scrollToHash(as) {\n        const [, hash] = as.split('#');\n        // Scroll to top if the hash is just `#` with no value\n        if (hash === '') {\n            window.scrollTo(0, 0);\n            return;\n        }\n        // First we check if the element by id is found\n        const idEl = document.getElementById(hash);\n        if (idEl) {\n            idEl.scrollIntoView();\n            return;\n        }\n        // If there's no element with the id, we check the `name` property\n        // To mirror browsers\n        const nameEl = document.getElementsByName(hash)[0];\n        if (nameEl) {\n            nameEl.scrollIntoView();\n        }\n    }\n    urlIsNew(asPath) {\n        return this.asPath !== asPath;\n    }\n    prefetch(url) {\n        return new Promise((resolve, reject) => {\n            // Prefetch is not supported in development mode because it would trigger on-demand-entries\n            if (process.env.NODE_ENV !== 'production' || process.env.__NEXT_EXPERIMENTAL_DEBUG)\n                return;\n            const { pathname } = url_1.parse(url);\n            // @ts-ignore pathname is always defined\n            const route = toRoute(pathname);\n            this.pageLoader.prefetch(route).then(resolve, reject);\n        });\n    }\n    async fetchComponent(route) {\n        let cancelled = false;\n        const cancel = this.componentLoadCancel = () => {\n            cancelled = true;\n        };\n        const Component = await this.pageLoader.loadPage(route);\n        if (cancelled) {\n            const error = new Error(`Abort fetching component for route: \"${route}\"`);\n            error.cancelled = true;\n            throw error;\n        }\n        if (cancel === this.componentLoadCancel) {\n            this.componentLoadCancel = null;\n        }\n        return Component;\n    }\n    async getInitialProps(Component, ctx) {\n        let cancelled = false;\n        const cancel = () => { cancelled = true; };\n        this.componentLoadCancel = cancel;\n        const { Component: App } = this.components['/_app'];\n        const props = await utils_1.loadGetInitialProps(App, { Component, router: this, ctx });\n        if (cancel === this.componentLoadCancel) {\n            this.componentLoadCancel = null;\n        }\n        if (cancelled) {\n            const err = new Error('Loading initial props cancelled');\n            err.cancelled = true;\n            throw err;\n        }\n        return props;\n    }\n    abortComponentLoad(as) {\n        if (this.componentLoadCancel) {\n            Router.events.emit('routeChangeError', new Error('Route Cancelled'), as);\n            this.componentLoadCancel();\n            this.componentLoadCancel = null;\n        }\n    }\n    notify(data) {\n        const { Component: App } = this.components['/_app'];\n        this.subscriptions.forEach((fn) => fn(Object.assign({}, data, { App })));\n    }\n    subscribe(fn) {\n        this.subscriptions.add(fn);\n        return () => this.subscriptions.delete(fn);\n    }\n}\nRouter.events = mitt_1.default();\nexports.default = Router;\n"]},"metadata":{},"sourceType":"script"}